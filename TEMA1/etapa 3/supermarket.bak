#lang racket
(require racket/match)
(require "queue.rkt")

(provide (all-defined-out))

(define ITEMS 5)

;; ATENȚIE: Pentru această etapă a temei este necesar să implementați
;;          întâi TDA-ul queue în fișierul queue.rkt.
;; Reveniți la sarcinile din acest fișier după ce ați implementat tipul 
;; queue și ați verificat implementarea folosind checker-ul.


; Structura counter nu se modifică.
; Ceea ce se modifică este implementarea câmpului queue:
; - în loc de listă, acesta va fi o coadă (o structură de tip queue)
; - acest lucru nu este vizibil în definiția structurii counter,
;   ci în implementarea operațiilor acestui tip de date (tipul counter)
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați funcțiile de mai jos astfel încât ele să folosească
; o structură de tip queue pentru reprezentarea cozii de persoane.
; Elementele cozii continuă să fie perechi (nume . nr_produse).
; Este esențial să respectați "bariera de abstractizare", adică să
; operați cu coada doar folosind interfața acestui TDA:
; - empty-queue
; - queue-empty?
; - enqueue
; - dequeue
; - top
; Obs: Doar câteva funcții vor necesita actualizări.
(define (empty-counter index)           ; testată de checker
  (make-counter index 0 0 empty-queue))

(define (update-aux f counters index acc)
  (cond
    ((null? counters) acc)
    ((if (= (counter-index (car counters)) index) (update-aux f (cdr counters) index (append acc (list (f (car counters)))))
         (update-aux f (cdr counters) index (append acc (list (car counters))))))))

(define (update f counters index)
  (update-aux f counters index '()))

(define tt+
  (lambda (minutes)
    (lambda (C)
        (match C [(counter index tt et queue) (make-counter index (+ tt minutes) et queue)]))))

(define et+
  (lambda (minutes)
    (lambda (C)
        (match C [(counter index tt et queue) (make-counter index tt (+ et minutes) queue)]))))

(define (add-to-counter name items)     ; testată de checker
  (λ (C)                               ; nu modificați felul în care funcția își primește argumentele
   (if (queue-empty? (counter-queue C))
       (make-counter (counter-index C) (+ (counter-tt C) items) (+ (counter-et C) items) (enqueue (cons name items) (counter-queue C)))
       (make-counter (counter-index C) (+ (counter-tt C) items) (counter-et C) (enqueue (cons name items) (counter-queue C))))))

(define min-helper
 (lambda (f) 
    (lambda (counters)
      (foldl (lambda (e res) (if (< (f e) (cdr res)) (cons (counter-index e) (f e)) res)) (cons (counter-index (car counters)) (f (car counters))) counters)
      )))

(define min-tt (min-helper counter-tt)) ; folosind funcția de mai sus
(define min-et (min-helper counter-et)) ; folosind funcția de mai sus

(define (remove-first-from-counter C)   ; testată de checker
  (if (> (+ (queue-size-l (counter-queue C)) (queue-size-r (counter-queue C))) 1)
  (make-counter (counter-index C) (- (counter-tt C) (counter-et C)) (cdr (top (dequeue (counter-queue C)))) (dequeue (counter-queue C)))
  (make-counter (counter-index C) 0 0 empty-queue)))


; TODO
; Implementați o funcție care calculează starea unei case după un număr dat de minute.
; Funcția presupune, fără să verifice, că în acest timp nu a ieșit nimeni din coadă, 
; deci va avea efect doar asupra câmpurilor tt și et.
; (cu alte cuvinte, este responsabilitatea utilizatorului să nu apeleze această funcție
; cu minutes > timpul până la ieșirea primului client din coadă)
; Atenție: casele fără clienți nu trebuie să ajungă la timpi negativi!

(define (pass-time-through-counter minutes)
  (λ (C)
    (if (queue-empty? (counter-queue C))
        (if ( < minutes (counter-et C)) 
            (make-counter (counter-index C) (- (counter-tt C) minutes) (- (counter-et C) minutes) (counter-queue C))
            (make-counter (counter-index C) 0 0 (counter-queue C)))
       (make-counter (counter-index C) (- (counter-tt C) minutes) (- (counter-et C) minutes) (counter-queue C)) )))
  

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 2, apar modificări în:
; - formatul listei de cereri (parametrul requests)
; - formatul rezultatului funcției (explicat mai jos)
; requests conține 4 tipuri de cereri (3 moștenite din etapa 2 plus una nouă):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă            (ca înainte)
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute       (ca înainte)
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)         (ca înainte)
;   - <x> - trec <x> minute de la ultima cerere, iar starea caselor se actualizează
;           corespunzător (cu efect asupra câmpurilor tt, et, queue)                     (   NOU!   )
; Obs: Au dispărut cererile de tip remove-first, pentru a lăsa loc unui mecanism mai 
; sofisticat de a scoate clienții din coadă (pe măsură ce trece timpul).
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)  (ca înainte)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți) (ca înainte)
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>       (ca înainte)
; - când timpul prin sistem avansează cu <x> minute, tt-ul, et-ul și queue-ul tuturor 
;   caselor se actualizează pentru a reflecta trecerea timpului; dacă unul sau mai mulți 
;   clienți termină de stat la coadă, ieșirile lor sunt contorizate în ordine cronologică.
; Rezultatul funcției serve va fi o pereche cu punct între:
; - lista sortată cronologic a clienților care au părăsit supermarketul
;   - fiecare element din listă va avea forma (index_casă . nume)
;   - dacă mai mulți clienți ies simultan, sortați-i crescător după indexul casei
; - lista caselor în starea finală (ca rezultatul din etapele 1 și 2)
; Obs: Pentru a contoriza ieșirile din cozi, puteți să lucrați într-o funcție ajutătoare
; (cu un parametru în plus față de funcția serve), pe care serve doar o apelează.

(define (sum-tt counters sum)
      (if (null? counters) sum (sum-tt (cdr counters) (+ sum (counter-tt (car counters))))))

(define (average-tt counters)
   (/ (sum-tt counters 0) (length counters)))

(define (counters-with-customers counters)
    (cond
     ((null? counters) '())
     ((queue-empty? (counter-queue (car counters))) (counters-with-customers (cdr counters)))
     (else (append (list (car counters)) (counters-with-customers (cdr counters))))))


(define (serve-helper requests fast-counters slow-counters iesiri)

  (define (check-n-items n-items)
    (if (<= n-items ITEMS) (append fast-counters slow-counters) slow-counters))
  
  (if (null? requests)
      (cons iesiri (append fast-counters slow-counters))
      (match (car requests)
        
       [(list 'ensure average)
           (if (> (average-tt (append fast-counters slow-counters)) average)
              (serve-helper requests fast-counters (append slow-counters (list (empty-counter (+ (counter-index (last slow-counters)) 1)))) iesiri)
               (serve-helper (cdr requests) fast-counters slow-counters iesiri))]
        
       [(list name n-items)
        (serve-helper (cdr requests) (update (add-to-counter name n-items) fast-counters (car (min-tt (check-n-items n-items))))
                                       (update (add-to-counter name n-items) slow-counters (car (min-tt (check-n-items n-items)))) iesiri)]

       [(list 'delay index minutes)
        (serve-helper (cdr requests) (update (et+ minutes) (update (tt+ minutes) fast-counters index) index)
                                            (update (et+ minutes) (update (tt+ minutes) slow-counters index) index) iesiri)]
       [x
        ;(serve-helper (cdr requests) fast-counters slow-counters iesiri)]
        (serve-helper (cdr requests) (map (update-after-x-minutes x) fast-counters) (map (update-after-x-minutes x) slow-counters)
                      (filter (λ (C) (if (
                                                                                                                                    ) ]

        )

      )
  )
(define (serve requests fast-counters slow-counters)
  (serve-helper requests fast-counters slow-counters '()))

(define C1 (empty-counter 1))
(define C2 (empty-counter 2))
(define C3 (empty-counter 3))
(define C4 (empty-counter 4))
(define fast-counters (list C1))
(define slow-counters (list C2 C3 C4 ))
;(update (add-to-counter 'DINU 10) (list C1 C2 C3 C4 C5) (car (min-tt (list C1 C2 C3 C4 C5))))

;(map (pass-time-through-counter 5) slow-counters)
;(sort slow-counters (λ (C1 C2) (if (< (counter-et C1) (counter-et C2)) #t #f)))



(define (update-after-x-minutes x)
  (λ (C) 
    (if (< x (counter-et C)) ((pass-time-through-counter x) C)
        (if (<= (+ (queue-size-l (counter-queue C)) (queue-size-r (counter-queue C))) 1)
            (remove-first-from-counter C)
            (if (< (- x (counter-et C)) (cdr (top (dequeue (counter-queue C)))))
                ((pass-time-through-counter (- x (counter-et C))) (remove-first-from-counter C))
                ((update-after-x-minutes (- x (counter-et C)))(remove-first-from-counter C))
            )))))
        




(define (iesiri counters minutes acc)
    (if (null? counters) acc
        (if (= (+ (queue-size-l (counter-queue (car counters))) (queue-size-r (counter-queue (car counters)))) 1)
            (iesiri (cdr counters) minutes (append acc (list (cons (counter-index (car counters)) (car (top (counter-queue (car counters))))))))
            (iesiri (append (cdr counters) (list (make-counter (counter-index (car counters)) (counter-tt (car counters)) (+ (counter-tt (car counters))
                                                                                                                       (cdr (top (dequeue (counter-queue (car counters))))))
                                                         (dequeue (counter-queue (car counters)))))) minutes acc))))

    
      
(define C5 (make-counter 5 12 8 (queue '((remus . 6) (vivi . 4)) '() 2 0)))
((update-after-x-minutes 1) C5)
(iesiri (list C5) 12 '())
;((pass-time-through-counter 10) C5)

;(serve '(5 (delay 1 5) 2 )
;                     (list (counter 1 10 10 empty-queue))
;                     (list (counter 2 6 6 empty-queue)))


;((update-after-x-minutes 9) C4)
